;-------------------------------------------------------------------------------
; MSP430 Assembler Code Template for use with TI Code Composer Studio
;
;
;-------------------------------------------------------------------------------
            .cdecls C,LIST,"msp430.h"       ; Include device header file

;-------------------------------------------------------------------------------
ADD_OP:         .equ        0x11			; addition operation for calculator
SUB_OP:         .equ        0x22			; subtraction operation for calculator
MUL_OP:			.equ		0x33			; multiplication opertion for calculator
CLR_OP:			.equ		0x44			; clear function for calculator
END_OP:			.equ		0x55			; end operation for calculator
OPERAND:		.equ		r6				; a register for operand
ACCUMULATOR:	.equ		r5				; a register for accumulator

      		.data							; RAM
myResults:	.space	20						; twenty spaces for answers for later

            .text                           ; Assemble into program memory
            .retain                         ; Override ELF conditional linking
                                            ; and retain current section
            .retainrefs                     ; Additionally retain any sections
                                            ; that have references to current
                                            ; section
;-------------------------------------------------------------------------------
RESET       mov.w   #__STACK_END,SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop watchdog timer

;-------------------------------------------------------------------------------
                                            ; Main loop here
myProgram:	.byte	0x11, 0x11, 0x11, 0x11, 0x11, 0x44, 0x22, 0x22, 0x22, 0x11, 0xCC, 0x55 ; operation order

	mov.b	#0, ACCUMULATOR					; initialize the accumulator
	mov.b	#1, OPERAND						; initialize the operand

read										; Method to read the even bytes (numbers)
	mov.b	myProgram, ACCUMULATOR			; stores next number in accumulator
	inc.b	myProgram						; increments the program counter in ROM

operand										; Method to read odd bytes (operation)
	mov.b	myProgram, OPERAND				; increments the program counter in ROM
	inc.b 	myProgram

	cmp.b	&ADD_OP, OPERAND				; compare to see what the next operand is
	jmp		addition						; jump if addition
	cmp.b	&SUB_OP, OPERAND
	jmp		subtract						; jump if subtraction
	cmp.b	&MUL_OP, OPERAND
	jmp		multiply						; jump if multiplication
	cmp.b	&CLR_OP, OPERAND
	jmp		clear							; jump if clear
	cmp.b	&END_OP, OPERAND
	jmp		endProgram						; jump if ending Program

addition									; Method for addition operation
	add.b	myProgram, ACCUMULATOR			; add the next number with the accumulator
	inc.b	myProgram						; increment the program counter in ROM
	mov.b 	ACCUMULATOR, myResults			; store answer in RAM
	inc.b	myResults						; increment the answer counter in RAM
	jc		overFlow						; jump to overflow Method if greater than 255
	jmp 	operand							; jump back to odd byte reader

subtract									; Method for subtraction
	sub.b	myProgram, ACCUMULATOR			; subtract the next number from accumulator
	inc.b	myProgram						; increment the program counter in ROM
	mov.b 	ACCUMULATOR, myResults			; store the answer in RAM
	inc.b	myResults						; increment the answer counter in RAM
	jc		overFlow0
	jmp 	operand							; jump back to odd byte reader

multiply									; Method for multiplication
	mov.b	myProgram, &MPY					;
	inc.b 	myProgram						;
	mov.b	ACCUMULATOR, &OP2				; attempt at datasheet suggested
	NOP										; multiplication method, but errors occured
	mov.b	#RESLO, ACCUMULATOR				;
	jc		overFlow						; jump to overflow method if greater than 255
	jmp 	operand							; jump back to odd byte reader

clear										; Method for the clear function
	mov.b	#0, ACCUMULATOR					; clear the accumulator (place a 0 there)
	inc.b	myProgram						; increment the program counter in ROM
	mov.b 	ACCUMULATOR, myResults			; store the answer in RAM
	inc.b	myResults						; increment the answer counter in RAM
	jmp 	operand							; jump back to odd byte reader

overFlow									; Method for handling greater than 255
	mov.b	#255, ACCUMULATOR				; Cap the accumulator at 255 if it overflowed
	jmp 	operand							; jump back to odd byte reader method

overFlow0									; Method for handling less than 0
	mov.b	#0, ACCUMULATOR				; Cap the accumulator at 0 if it overflowed
	jmp 	operand							; jump back to odd byte reader method

endProgram	jmp		endProgram				; forever loop






;-------------------------------------------------------------------------------




;-------------------------------------------------------------------------------
;           Stack Pointer definition
;-------------------------------------------------------------------------------
            .global __STACK_END
            .sect 	.stack

;-------------------------------------------------------------------------------
;           Interrupt Vectors
;-------------------------------------------------------------------------------
            .sect   ".reset"                ; MSP430 RESET Vector
            .short  RESET
